ch08 컨트롤러
1. 컨트롤러 클래스 제작
	(1) 최초 클라이언트로부터 요청이 들어왔을 때, (DispatcherServlet이 매핑이 되어 있으므로, DispatcherServlet이 받고 HandlerMapping과 HandlerAdapter를 통해) 
	    컨트롤러로 진입하게 되고, 컨트롤러는 요청에 대한 작업을 한 후 (ViewResolver를 통해 뷰를 찾아) 뷰 쪽으로 데이터를 전달,
	    그러면 뷰로 인해 화면에 응답을 하는 구조
	(2) 컨트롤러 클래스 제작 순서
		① @Controller 어노테이션을 클래스에 적용
		 컨트롤러 역할의 클래스 파일은 servlet-context.xml에 <context:component-scan base-package="com.lec.ch08" /> 명시된 패키지 아래에만 위치할 수 있다
		② @requestMapping 어노테이션을 이용해서 요청 경로를 지정
		③ 웹브라우저의 요청을 처리할 메서드를 구현
		④ 뷰이름을 리턴
2. 요청 처리 메소드 제작.
	(1) 클라이언트의 요청을 처리할 메소드를 제작
	(2) 뷰페이지 이름 생성(조합) 방법
		servlet-context.xml의 아래의 소스에 의해 조합됨
			<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<beans:property name="prefix" value="/WEB-INF/views/" />
				<beans:property name="suffix" value=".jsp" />
			</beans:bean>
			뷰페이지 이름 = prefix + 요청처리 메소드 반환값 +suffix
3. 뷰에 데이터 전달
	(1) 컨트롤러에서 로직 수행 후 뷰페이지를 반환하고, 이 때 뷰에서 사용하게 될 데이터를 객체로 전달할 수 있다.
	(2) Model 클래스를 이용한 데이터 전달 ; @RequestMapping어노테이션이 붙은 메소드는 Model형 객체를 매개변수로 받을 수 있다.
		① Model 객체를 파라미터로 받음 ex. Public String content(Model model){
		② Model 객체에 데이터를 담음   ex. model.addAttribute(“id”,”aa”);
		③ 컨트롤러에서 전달받은 Model 객체의 속성을 이용함 ex. ${id}
	(3) ModelAndView 클래스를 이용한 데이터 전달 ; 매개변수로 데이터를 안 받고 매소드 안에서 직접 생성한다.
		① ModelAndView 객체생성 ex. ModelAndView mv = new ModelAndView();
		② Model 객체에 데이터를 담음 ex. mv.addObject(“id”,30);
		③ 뷰이름 설정		    ex.mv.setViewName(“board/reply”);
		④ 컨트롤러에서 전달받은 객체의 속성을 이용함  ex. ${id}
4. 클래스에 @requestMapping 적용
	(1) 메소드마다 @RequestMapping 어노테이션을 적용하여 요청경로를 얻는다.
	(2) 메소드에 @RequestMapping 어노테이션을 적용하여 요청경로를 얻는다. 
	     @RequestMapping 어노테이션을 클래스에 적용하여 요청경로를 얻는 방법도 있음

