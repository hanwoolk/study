ch06 AOP(Aspect Oriented Programming)

1. AOP란?
	- 객체 지향 프로그래밍에서 하나의 관심사항을 따로 분리하여 모듈화하는 방법론
	- 이를 통해 코드의 가독성과 유지보수성을 높이고, 중복 코드를 줄이며, 관심사를 분리함으로써 모듈화를 쉽게 할 수 있음
	- AOP는 다음과 같은 네 가지 항목으로 나눌 수 있다
2. AOP와 관련된 용어
	- Aspect : 공통 기능. 예를 들어 로깅같은 기능 자체에 대한 용어
	- Advice : 공통기능을 구현한 객체 메소드
	- Join Point : 핵심기능. 공통 기능을 적용할 수 있는 대상.
	- PointCuts : Join Point의 부분으로 실제 Advice를 적용해야 되는 부분
	- Proxy : Advice가 적용되었을 때 만들어지는 객체
	- Weaving : Advice와 target이 결합되어서 프록시 객체를 만드는 과정(advice를 핵심기능에 적용하는 행위)
3. 스프링에서 AOP 구현
	- AOP의 구현은 proxy를 이용한다.
	- Weaving 방식은 두가지
		① XML을 이용
		② @Aspect 어노테이션 이용
		③ XML 설정 파일에 Aspect 설정
4. XML 기반의 AOP 구현
	- 작업순서
		① Pom.xml에서 의존 설정
		② Proxy 클래스 제작(공통기능의 클래스 제작 – Advice 역할 클래스)
5. Advice의 종류
	- <aop:before> 핵심기능 메소드 실행 전에 advice 실행
	- <aop:after-returning> 정상적으로 핵심기능 메소드 실행 후에 advice 실행
	- <aop:after-throwing> 핵심기능 메소드 실행 중 exception 발생시 advice 실행
	- <aop:after> 핵심기능 메소드 실행 후( exception이 발생여부에 상관없이 반드시 ) advice 실행
	- <aop:around> 핵심기능 메소드 실행 전/후 및 exception 발생시 advice 실행 (가장 광범위하게 사용)
5. @Aspect를 이용한 AOP구현
	- 작업순서
		① 의존 설정
		② @Aspect 어노테이션을 이용한 Aspect class 제작
			@pointcut
			@Around @Before @AfterReurning @AfterThrowing @After
		③ XML 설정 파일에 <aop:aspectj-autoproxy/>설정

6. AspectJ Pointcut 표현식
	- Pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용 합니다.
	* : 모든
	. : 현재
	.. : 0개 이상
		① execution
			@Pointcut("execution(public void get*(..))") 
			   // public void인 모든 get메소드
			@Pointcut("execution(* com.lec.ch05.ex.*.*())") 
			   // com.ch.ex 패키지에 파라미터가 없는 모든 메소드
			@Pointcut("execution(* com.lec.ch05.ex..*.*())") 
			   // com.ch.ex 패키지 & com.ch.ex 하위 패키지에 파라미터가 없는 모든 메소드
			@Pointcut("execution(* com.lec.ch05.ex.Worker.*())") // com.ch.ex.Worker 안의 모든 메소드
		② within
			@Pointcut("within(com.lec.ch05.ex.*)")	 
			   //com.ch.ex 패키지 안에 있는 모든 메소드
			@Pointcut("within(com.lec.ch05.ex..*)") 
			   // com.ch.ex 패키지 및 하위 패키지 안에 있는 모든 메소드
			@Pointcut("within(com.lec.ch05.ex.Worker)") 
			   // com.ch.ex.Worker 모든 메소드
		③ bean
			@Pointcut("bean(student)") 
			   //student 빈에만 적용
			@Pointcut("bean(*ker)") 
			   //~ker로 끝나는 빈에만 적용
