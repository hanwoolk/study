ch06_메소드

1. 객체지향 이전엔 위에서부터 순차적으로 실행되는 절차 지향 방식 사용
2. 객체지향 방식의 단점 : 
	2-1. 기존 로직 다시 사용시 비효율적
	2-2. 코드의 양이 너무 질어지고 유지보수가 어려워짐
3. 이로인해 메소드(method, 함수) 방식 등장
4. 메소드란? 
	4-1. 작업을 수행하기 위한 명령문의 집합.
	4-2. 데이터가 주어지면 메소드가 알아서 결과값을 반환하는 방식.
5. 메소드 방식의 특징
	4-1. 높은 가용성 및 오버로딩으로 크기가 큰 코딩에 용이.
	4-2. 반복적으로 수행되는 여러 문장을 소화 가능.
	4-3. 데이터가 복잡해지고 많아짐에따라 코드의 양도 많아지고 어려워짐
6. 이로인해 객체지향 프로그래밍 등장
7. 객체란? 동일한 성질의 데이터와 메소드를 모아두고 적재적소에 사용할 수 있게 만들어 놓은 덩어리

용어
ex) ①private static long factorial(int ②s)
	if (s == ③1) {

① 제한자
- public : 외부 class에서도 접근 가능
- private : 현재 class에서만 접근 가능
- default(아무 제한자도 작성 x 일때) : 같은 package에 소속된 class에서만 접근 가능

②매개변수
- 메소드 등에서 사용되는 전달된 값을 받는 변수
- 메소드를 호출할 때 인수로 전달된 값을 메소드 내부에서 사용할 수 있게 해주는 변수

③인수
- 값, 변수, 참조 등 전달되는 값