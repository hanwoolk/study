ch12 인터페이스

1. 인터페이스란?
	1-1. 작업명세서(작업지시서)
	    - 구현 방향을 표현해 놓은 것
	    - 실제 구현된 것이 전혀 없는 기본 설계도
	    - 객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용
	    - 미리 정해진 규격에 맞게 구현하도록 표준을 제시하는 데 사용
	    - 추상메소드와 상수만을 멤버로 가질 수 있음
	1-2. *다형성*을 가능하게 함(하나의 객체를 다양하게 많은 type으로 만들 수 있다)

	1-3. 객체를 부속품화 - 다양한 객체를 제품의 부속품처럼 개발자 마음대로 변경할 수 있음
2. 인터페이스 문법
	2-1. 'class' 대신 'interface' 예약어를 사용
	2-2. 실제 구현된 기능 없이 추상 메소드와 상수만 존재
	    - 모든 멤버 변수는 public static final 이어야하며, static final은 생략 가능
	    - 모든 메소드는 public abstract 이어야하며, abstract를 생략 가능
	2-3. 상수나 메소드를 만들 때 private 접근 제한자는 사용 불가
	2-4. 변수타입 - 인터페이스는 객체를 생성할 수 없다. 다만, 변수 타입으로만 사용됨.
		       (예외 : 익명 구현 객체만 생성가능)
	2-5. 구현은 Implement 되는 클래스에서 한다.
3. 다형성이란?
	3-1. 다형성이란 여객체가 다양하게 변할 수 있는 특성
	3-2. 하나의 인터페이스를 사용하여 다양한 구현 방법을 제공
	3-3. 하나의 클래스나 함수가 다양하게 동작하는 것
	     - 오버라이딩 (메소드 재정의): 부모클래스와 자식클래스에 동일한 method 존재(틀만 가져와 재정의)
				      상속받은 메서드의 내용을 변경하는 것(change, modify)
				      선언부가 같아야 한다(이름, 매개변수, 리턴타입)
                       			      접근제어자를 좁은 범위로 변경할 수 없다.
				      (조상클래스 메서드가 protected라면 범위가 같거나 넓은 protected나 public으로만)

	     - 오버로딩 (메소드 다중정의): 같은 class에서 동일한 메소드가 매개변수를 달리 여러 개 존재
				      컴파일러 입장에서는 기존에 없는 새로운 메서드를 정의하는 것(new)
4. Java는 다중상속이 불가하지만 interface를 통해서는 다중구현이 가능
5. 인터페이스의 장점
	5-1. 개발시간을 단축
	     - 메소드를 호출하는 쪽에서는 메소드를 구현하는 선언부만알면 개발에 착수 가능하고,
	       다른 한쪽에선 인터페이스를 구현하는 클래스를 작성하도록하여 양쪽에서 동시 개발이 가능
	5-2. 표준화가 가능
	     - 프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여
	       프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능
	5-3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
	     - 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다
	5-4. 독립적인 프로그래밍이 가능
	     - 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면,
	       한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능
6. 인터페이스와 추상클래스
	6-1. 공통점
	     - 추상메소드를 가지고 있어 하위 클래스에서 구현해야함
	     - 객체생성이 목적이 아닌 변수 타입을 정의하는 것이 목적
	     - 객체 생성이 불가하지만 anonymose(익명클래스)를 이용할 수 있음
	6-2. 차이점
	     - 추상메소드 : 상속(extends)      / 변수, 메소드의 모든 기능을 사용 가능/ 추상클래스는 상속이므로 단일 상속만 지원
	     - 인터페이스 : 구현(implements) /  상수와 추상메소드만 존재             /  인터페이스는 다중구현이 가능 
7. default 메소드
	7-1. 인터페이스는 실제 코드를 구현한 로직은 포함될 수 없지만 메소드 선언 시에 default를 명시하게 되면
	      인터페이스 내부에서도 로직이 포함된 메소드를 선언할 수 있음